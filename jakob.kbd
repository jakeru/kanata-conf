(defcfg
  process-unmapped-keys no
)

;; A basic layout that should fit a fair amount of keyboards.
;; We only care about the keys we actually plan use.
(defsrc
  esc     1       2       3       4       5       6       7       8       9       0
  tab     q       w       e       r       t       y       u       i       o       p       [
  caps    a       s       d       f       g       h       j       k       l       ;       '
  lsft    z       x       c       v       b       n       m       ,       .       /
  lmet    lalt    spc     ralt
)

(defvar
  tap-timeout 200
  tt $tap-timeout
  hold-timeout 200
  ht $hold-timeout
  one-shot-timeout 1000
  ost $one-shot-timeout
)

(defalias
  ;; Map caps lock to esc when tapped and lctrl when pressed.
  caps (tap-hold-press $tt $ht esc lctrl)
  ;; Map lmet to insert a symbol when tapped and lmet while held.
  lmet (tap-hold-press $tt $ht (one-shot $ost (layer-while-held sym)) lmet)
  ;; Map lalt to insert a symbol when tapped and nav layer while held.
  lalt (tap-hold-press $tt $ht (one-shot $ost (layer-while-held sym)) (layer-while-held nav))
  ;; Map ralt to enter when tapped and ralt while held.
  ralt (tap-hold $tt $ht ret ralt)
  ;; Keep sym layer active when held.
  sym (layer-while-held sym)
  ;; Switch language
  lse (layer-switch swedish)
  lus (layer-switch default)
  ;; Some more symbols that need shift to be produced.
  ;; Symbol {
  lcbr S-[
  ;; Symbol }
  rcbr S-]
  ;; Symbol *
  ast S-8
  ;; Symbol ^
  xor S-6
  ;; Symbol $
  dlr S-4
  ;; Symbol (
  lpar S-9
  ;; Symbol )
  rpar S-0
  ;; Sybmol |
  pipe S-\
  ;; Symbol _
  ldsh S-min
  ;; Symbol ~
  tld S-grv
  ;; Shift+tab
  stab S-tab
  copy (arbitrary-code 133)
  pste (arbitrary-code 135)
  ;; Caps lock until word if tapped and ctrl if held.
  cwc (tap-hold-press $tt $ht
      (caps-word-custom
        5000
        (- a b c d e f g h i j k l m n o p q r s t u v w x y z [ ' ;)
        ()
      )
      lctrl)
  ;; Characters are made using Compose from:
  ;; /usr/share/X11/locale/en_us.UTF-8/Compose
  ;; Character å
  aring (macro comp a a)
  ;; Character ä
  auml (macro comp S-' a)
  ;; Character ö
  ouml (macro comp S-' o)
  ;; Character é - used in the Swedish word "idé" (idea).
  eacute (macro comp ' e)
  ;; Character è (not sure if I need this)
  egrave (macro comp grv e)
  ;; Character : (very useful when using Swedish layout)
  colon S-;
)

(deflayer default
  _       _       _       _       _       _       _       _       _       _       _
  _       _       _       _       _       _       _       _       _       _       _       _
  @caps   _       _       _       _       _       _       _       _       _       _       _
  _       _       _       _       _       _       _       _       _       _       _
  @lmet   @lalt   _       @ralt
)

(deflayer nav
  _       f1      f2      f3      f4      f5      f6      f7      f8      f9      f10
  _       _       @lus    end     @stab   tab     @copy   pgup    @stab   tab       @pste   _
  @cwc    home    @lse    del     pgdn    pgup    left    down    up      rght    @colon      grv
  _       _       _       @copy   @pste   _       bspc    pgdn    _       _       -
  _       _       ret     _
)

(deflayer sym
  _       _       _       _       _       _       _       _       _       _       _
  _       _       _       @eacute _       _       =       7       8       9       +       _
  _       \       @pipe   @lcbr   @lpar   [       @ast    4       5       6       -       _
  _       @dlr    @xor    @rcbr   @rpar   ]       @tld    1       2       3       -
  _       @sym    @ldsh   0
)

(deflayer swedish
  _       _       _       _       _       _       _       _       _       _       _
  _       _       _       _       _       _       _       _       _       _       _      @aring
  @caps   _       _       _       _       _       _       _       _       _       @ouml  @auml
  _       _       _       _       _       _       _       _       _       _       _
  @lmet   @lalt   _       @ralt
)
